from . import util
import logging

from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update, InlineKeyboardButton, InlineKeyboardMarkup
from database import categories as cat
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

from bot.database import places

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
# set higher logging level for httpx to avoid all GET and POST requests being logged
logging.getLogger("httpx").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

MAIN, SEARCHING, NEXT_OR_EXIT, CHOOSING_CATEGORY = range(4)

main_keyboard = ReplyKeyboardMarkup([
    ["–ü–æ–∏—Å–∫üîé", "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ‚ú®"],
    ["–ö–∞—Ç–µ–≥–æ—Ä–∏–∏üóÉÔ∏è", "–°–ª—É—á–∞–π–Ω–æ–µ –º–µ—Å—Ç–æüé≤"],
], one_time_keyboard=False)

searching_keyboard = ReplyKeyboardMarkup([
    ["–û—Ç–º–µ–Ω–∏—Ç—åüö´"],
], one_time_keyboard=False)

next_or_exit_keyboard = ReplyKeyboardMarkup([
    ["–û—Ç–º–µ–Ω–∏—Ç—åüö´", "–°–ª–µ–¥—É—é—â–µ–µ‚¨áÔ∏è"],
], one_time_keyboard=False)

welcome_string = "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö –£–¥–º—É—Ä—Ç–∏–∏"


async def send_place(update: Update, context: ContextTypes.DEFAULT_TYPE, reply_markup):
    info = context.user_data["results"][context.user_data["results_counter"]]
    await update.message.reply_text(
        f"{info["name"]}\n{info["description"]}",
        reply_markup=reply_markup,
    )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        welcome_string,
        reply_markup=main_keyboard,
    )
    return MAIN


async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if util.compare_input(update.message.text, "–ø–æ–∏—Å–∫"):
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞", reply_markup=searching_keyboard)
        return SEARCHING
    if util.compare_input(update.message.text, "–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"):
        return CHOOSING_CATEGORY
    return MAIN


async def searching(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if util.compare_input(update.message.text, "–æ—Ç–º–µ–Ω–∏—Ç—å"):
        await update.message.reply_text(welcome_string, reply_markup=main_keyboard)
        return MAIN
    context.user_data["results"] = list(places.collect.find({"$text": {"$search": update.message.text}}))
    context.user_data["results_counter"] = 0
    if not context.user_data["results"]:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å", reply_markup=main_keyboard)
        return MAIN
    if len(context.user_data["results"]) == 1:
        await send_place(update, context, main_keyboard)
        return MAIN
    await send_place(update, context, next_or_exit_keyboard)
    context.user_data["results_counter"] += 1
    return NEXT_OR_EXIT


async def choosing_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    categories = cat.get_all()
    keyboard = [[InlineKeyboardButton(c["name"], callback_data=f"category {c["_id"]}")] for c in categories]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)


async def next_or_exit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if util.compare_input(update.message.text, "–æ—Ç–º–µ–Ω–∏—Ç—å"):
        await update.message.reply_text(welcome_string, reply_markup=main_keyboard)
        return MAIN
    if util.compare_input(update.message.text, "—Å–ª–µ–¥—É—é—â–µ–µ"):
        if context.user_data["results_counter"] >= len(context.user_data["results"]) - 1:
            await send_place(update, context, main_keyboard)
            return MAIN
        await send_place(update, context, next_or_exit_keyboard)
        context.user_data["results_counter"] += 1
        return NEXT_OR_EXIT


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    #await query.edit_message_text(text=f"Selected option: {query.data}")
    data = query.data.split()
    if data[0] == "category":
        await show_in_category(update, context, data)


async def show_in_category(update: Update, context: ContextTypes.DEFAULT_TYPE, data):
    category_id = data[1]
    category = cat.get_by_id(category_id)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ú–µ—Å—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category['name']}:", reply_markup=next_or_exit_keyboard)
    # await update.message.reply_text(f"–ú–µ—Å—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category['name']}:", reply_markup=next_or_exit_keyboard)
    #context.user_data["results"] =
    #context.user_data["results_counter"] = 0


